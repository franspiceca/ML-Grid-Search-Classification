import pandas as pd
import numpy as np
from seaborn import load_dataset
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression 
from sklearn.preprocessing import FunctionTransformer, MinMaxScaler, StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV

from seaborn import load_dataset
df = load_dataset("diamonds")
df.head()

##Splitting into discrete and continuous features
discrete_features = ['cut', 'color', 'clarity']
continuous_features = ['carat', 'depth', 'table', 'x', 'y', 'z']

#Making discrete features categorical
for i in discrete_features:
    df[i]=pd.Categorical(df[i].astype(str))
    
##Setting my X and y values
X = df[continuous_features + discrete_features]
y = df['price']

##Setting my testing and training data (and random seed to reproduce easily)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

##Setting up my pipeline
num_transformer = Pipeline(steps=[('impute', SimpleImputer(strategy='median'))
                                 ,('scale', MinMaxScaler())])

cat_transformer = Pipeline(steps=[('impute', SimpleImputer(strategy='constant', fill_value='Missing'))
                                 ,('enc', OneHotEncoder(sparse=False, handle_unknown='ignore'))])

preprocessor = ColumnTransformer([('num', num_transformer,continuous_features)
                                 ,('cat',cat_transformer,discrete_features)]
                                ,remainder='passthrough')

pipe = Pipeline(steps=[('preprocess', preprocessor), 
                       ('model', LogisticRegression(solver='saga'))])

##Setting up my parameters
parameters = {'preprocess__num__scale': [MinMaxScaler(), StandardScaler()],
              'model__penalty': ['l1', 'l2'],
              'model__C': [0.1, 1, 10]
             }

print("Parameter grid:\n{}".format(parameters),'\n')

##Defining my grid search
grid =  GridSearchCV(pipe, parameters, cv=5, return_train_score=True, scoring='roc_auc', n_jobs=3)

##Printing best parameters and results
print('best params ',model.best_params_,'\n')
print('best estimator ',model.best_estimator_,'\n')
print('best validation score ', model.best_score_,'\n')
print('scoring method ', model.scorer_)

print("Test set accuracy score: {:.7f}".format(model.score(X_test, y_test)))

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score, recall_score, precision_score, fbeta_score, classification_report

##Making predictions against test set
pred = model.predict(X_test)
